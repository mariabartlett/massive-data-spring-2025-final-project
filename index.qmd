---
title: "Gender Equity in College Sports"
subtitle: "Massive Data Fundamentals final project"
author: Bridgette Sullivan, Jasmine Jia, Katharyn Loweth, Maria Bartlett
editor: visual
format: 
  html: 
    embed-resources: true
toc: TRUE
toc-location: left
toc-depth: 7
---

## Policy context

### Equity in Athletics Disclosure Act (EADA)

## Data

## Research questions

## Data pipeline

Our analysis of gender equity in college sports required a robust data processing infrastructure to handle the EADA datasets. We implemented a cloud-based pipeline using AWS services to ensure scalability and reproducibility.

The EADA data contains multiple years of information across hundreds of institutions, with dozens of metrics for each sport and gender combination. This volume and complexity of data necessitated a solution beyond local computing resources. We selected AWS as our cloud provider due to its comprehensive suite of data processing services and strong integration capabilities.

![](pics/pipeline.png)

### STEP 1: Raw Data Upload to S3

We begin by storing our raw EADA CSV files in Amazon S3. These datasets contain critical gender equity indicators including team roster sizes, coaching staff compensation, recruitment expenses, and scholarship allocations.

Our Schools.csv file contains sport-specific data across institutions, including participation numbers and expenses separated by gender. The instLevel.csv file provides institution-wide metrics such as total athletics revenue and gender proportionality measurements. Both files contain sensitive financial information that benefits from S3's security features, while remaining accessible for our gender equity analysis.

![](pics/s3.png)

### STEP 2: Cluster Setup with EMR
Analyzing gender disparities across hundreds of institutions and dozens of sports requires significant computing power, especially for our unsupervised learning approach. We launched an Amazon EMR cluster to handle the dimensionality reduction and clustering analyses needed to identify patterns in athletic department spending and participation across genders.
Our EMR environment included Spark for distributed processing of the equity metrics and Jupyter for interactive analysis. While a single-node cluster proved sufficient for our initial investigation into gender gaps in basketball and track programs, EMR's scalability would accommodate future analyses of all NCAA sports across multiple divisions and yearsâ€”expanding our understanding of gender equity trends.
![](pics/emr_cluster.png)

### STEP 03: Launch Jupyter on EMR using SSH
Once the EMR cluster is active, we SSH into the EC2 Master node and manually start a Jupyter Notebook server on it.
This gives us a familiar, browser-based Python environment where we can fetch data from S3, run our analysis, and visualize the output. This step requires setting up SSH tunneling so that we can access the notebook from our local browser securely.

### STEP 04: Load & Analyze Data
In the notebook, we use boto3 to connect to S3 and load our datasets into Pandas for analysis.
We then run exploratory data analysis (EDA), correlation checks, visualizations, and prepare our results for export. Detailed analysis will be dicussed in the next section

![](pics/s3results.png)

After completing our analytical transformations, the processed gender equity datasets are stored back in our S3 bucket in a structured format.  By returning these processed datasets to S3, we maintain a complete data lineage from raw EADA submissions to final analytical outputs. This approach ensures reproducibility and allows team members to access the processed data through various tools, including direct connections from R for the visualization work presented in our exploratory and unsupervised learning sections. The S3 storage also facilitates version control as we refine our equity analyses over time, enabling us to track changes in gender disparities across multiple academic years of athletic department operations.

## Analyses

### Exploratory

```{r}
#| echo: fenced
#| eval: false
head(mtcars)

```

### Unsupervised

#### Institution Level

Using Principle Component Analysis (PCA) and K-means clustering, practicioners are able to better understand universities that are similar to each other in their sports equity. Below, there are five clusters, which seem to emerge based on school sizes. On the far right side of the graph is the large universities with higher amounts of spending and larger teams. These universities do skew the graph a bit since they are spending so much more on their sports teams in comparison to the many small schools that are primarily on the left side of the graph.<br><br>

```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false

#install.packages("plotly")
library(plotly)
library(dplyr)

# Read data from cleaned python file
inst_level_numerical_no_coed_no_na_no_name = read.csv('inst_level_pca_data.csv')

# Create a custom hover text
inst_level_numerical_no_coed_no_na_no_name$hover_text <- paste0(
  "University: ", inst_level_numerical_no_coed_no_na_no_name$university, "<br>",
  "PC1: ", round(inst_level_numerical_no_coed_no_na_no_name$PC1, 2), "<br>",
  "PC2: ", round(inst_level_numerical_no_coed_no_na_no_name$PC2, 2)
)


fig <- plot_ly(
  data = inst_level_numerical_no_coed_no_na_no_name,
  x = ~PC1,
  y = ~PC2,
  type = 'scatter',
  mode = 'markers',
  color = ~cluster,
  text = ~hover_text,
  hoverinfo = 'text',
  marker = list(size = 10)
)

fig <- fig %>% layout(
  title = 'KMeans Clustering with Hover Info',
  xaxis = list(title = 'Principal Component 1'),
  yaxis = list(title = 'Principal Component 2')
)

fig
```

<br><br> There are additional use cases where a school administrator may want to see similar universities to their own in this clustering algorithm. The next two examples show what administrators for schools like Georgetown or Furman might see when entering in their own universities and finding their nearest neighbors. Some of the results may be obvious, but others may be less so, leading to a reason for different schools to connect on their gender equity in sports and how they can improve or understand other programs. For example, Georgetown is close to many schools in their conference, but schools like East Carolina and Old Dominion are not far away from them and would maybe be less obvious schools to connect with. <br><br>

```{r}
#| eval: true
#| echo: false
# Replace with your selected university name
selected_university <- "Georgetown University"

# Get the data
df <- inst_level_numerical_no_coed_no_na_no_name

# Get the selected point
selected_point <- df %>% filter(university == selected_university)

# Compute Euclidean distance from selected point
df <- df %>%
  mutate(distance = sqrt((PC1 - selected_point$PC1)^2 + (PC2 - selected_point$PC2)^2))

# Identify top 5 closest (excluding the selected point itself)
nearest_neighbors <- df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  pull(university)

# Padding around the point for zoom
padding <- 5

# Calculate min and max around nearest neighbors for zoom
min_x = df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  select(PC1) %>%
  min()

max_x = df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  select(PC1) %>%
  max()

min_y = df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  select(PC2) %>%
  min()

max_y = df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  select(PC2) %>%
  max()

# Assign colors
df <- df %>%
  mutate(point_color = case_when(
    university == selected_university ~ "red",
    university %in% nearest_neighbors ~ "blue",
    TRUE ~ "gray"
  ))

# Create hover text
df$hover_text <- paste0(
  "University: ", df$university, "<br>",
  "PC1: ", round(df$PC1, 2), "<br>",
  "PC2: ", round(df$PC2, 2)
)

# Plot with custom colors
fig <- plot_ly(
  data = df,
  x = ~PC1,
  y = ~PC2,
  type = 'scatter',
  mode = 'markers',
  marker = list(color = ~point_color, size = 10),
  text = ~hover_text,
  hoverinfo = 'text'
) %>%
  layout(
    title = paste("Highlighting", selected_university, "and Nearest Neighbors"),
    xaxis = list(title = "Principal Component 1",
                 range = c(min_x - padding, max_x + padding)),
    yaxis = list(title = "Principal Component 2",
                 range = c(min_y - padding, max_y + padding))
  )

fig

```

<br><br> As for Furman, the schools nearest to them seem much less intuitive, with most being on the west coast which is quite the distance from the South Carolina school. These connections could help to facilitate unique discussions on how gender equity can be improved across various regions. <br><br>

```{r}
#| eval: true
#| echo: false
# Replace with your selected university name
selected_university <- "Furman University"


# Get the data
df <- inst_level_numerical_no_coed_no_na_no_name

# Get the selected point
selected_point <- df %>% filter(university == selected_university)

# Compute Euclidean distance from selected point
df <- df %>%
  mutate(distance = sqrt((PC1 - selected_point$PC1)^2 + (PC2 - selected_point$PC2)^2))

# Identify top 5 closest (excluding the selected point itself)
nearest_neighbors <- df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  pull(university)

# Padding around the point for zoom
padding <- 5

# Calculate min and max around nearest neighbors for zoom
min_x = df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  select(PC1) %>%
  min()

max_x = df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  select(PC1) %>%
  max()

min_y = df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  select(PC2) %>%
  min()

max_y = df %>%
  filter(university != selected_university) %>%
  arrange(distance) %>%
  slice(1:5) %>%
  select(PC2) %>%
  max()

# Assign colors
df <- df %>%
  mutate(point_color = case_when(
    university == selected_university ~ "red",
    university %in% nearest_neighbors ~ "blue",
    TRUE ~ "gray"
  ))

# Create hover text
df$hover_text <- paste0(
  "University: ", df$university, "<br>",
  "PC1: ", round(df$PC1, 2), "<br>",
  "PC2: ", round(df$PC2, 2)
)

# Plot with custom colors
fig <- plot_ly(
  data = df,
  x = ~PC1,
  y = ~PC2,
  type = 'scatter',
  mode = 'markers',
  marker = list(color = ~point_color, size = 10),
  text = ~hover_text,
  hoverinfo = 'text'
) %>%
  layout(
    title = paste("Highlighting", selected_university, "and Nearest Neighbors"),
    xaxis = list(title = "Principal Component 1",
                 range = c(min_x - padding, max_x + padding)),
    yaxis = list(title = "Principal Component 2",
                 range = c(min_y - padding, max_y + padding))
  )

fig
```

#### Sport Level

```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
basketball_data = read.csv('basketball_sport_data.csv')

# Create a custom hover text
basketball_data$hover_text <- paste0(
  "University: ", basketball_data$university, "<br>",
  "PC1: ", round(basketball_data$PC1, 2), "<br>",
  "PC2: ", round(basketball_data$PC2, 2)
)


fig <- plot_ly(
  data = basketball_data,
  x = ~PC1,
  y = ~PC2,
  type = 'scatter',
  mode = 'markers',
  color = ~gender,
  colors = c("women" = "red", "men" = "blue"),
  text = ~hover_text,
  hoverinfo = 'text',
  marker = list(size = 10)
)

fig <- fig %>% layout(
  title = 'Basketball Gender Data with Hover Info',
  xaxis = list(title = 'Principal Component 1'),
  yaxis = list(title = 'Principal Component 2')
)

fig

```

```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
xc_tf_data = read.csv('xctf_sport_data.csv')

# Create a custom hover text
xc_tf_data$hover_text <- paste0(
  "University: ", xc_tf_data$university, "<br>",
  "PC1: ", round(xc_tf_data$PC1, 2), "<br>",
  "PC2: ", round(xc_tf_data$PC2, 2)
)


fig <- plot_ly(
  data = xc_tf_data,
  x = ~PC1,
  y = ~PC2,
  type = 'scatter',
  mode = 'markers',
  color = ~gender,
  colors = c("women" = "red", "men" = "blue"),
  text = ~hover_text,
  hoverinfo = 'text',
  marker = list(size = 10)
)

fig <- fig %>% layout(
  title = 'Cross Country/Track & Field Gender Data with Hover Info',
  xaxis = list(title = 'Principal Component 1'),
  yaxis = list(title = 'Principal Component 2')
)

fig

```

## Project pitch
